services:
  mongo:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    environment:
      MONGO_INITDB_DATABASE: testbase
      MONGO_DB_ADMIN_USERNAME: mongo
      MONGO_DB_ADMIN_PASSWORD: mongo
    ports:
      - '27017:27017'
    volumes:
      - mongo:/data/db
      - ./scripts/setup_mongo.sh:/data/scripts/setup_mongo.sh
    networks:
      mongo-cluster:
        ipv4_address: 111.222.32.2
    healthcheck:
      test: echo "rs.status()" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
#      start_period: 0s
#      retries: 30

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - '8082:8081'
    extra_hosts:
      - mongo:111.222.32.2
      - host.docker.internal:host-gateway
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongo
      ME_CONFIG_MONGODB_URL: mongodb://mongo:mongo@mongo:27017/?replicaSet=rs0&authSource=admin
      ME_CONFIG_BASICAUTH: false
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    tty: true
    stdin_open: true
    networks:
      - mongo-cluster

  spring-app:
    image: spring2
    extra_hosts:
      - "mongo:111.222.32.2"
    #build:
    #  context: .
    #  dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - mongo-cluster
    working_dir:
      /my-project
    depends_on:
      - mongo
    #environment:
    #  DB_USERNAME: mongo
    #  DB_PASSWORD: mongo
    #  DB_URL: mongodb://mongo:27017/testbase?replicaSet=rs0

volumes:
  mongo:

networks:
  mongo-cluster:
    ipam:
      config:
        - subnet: 111.222.32.0/24

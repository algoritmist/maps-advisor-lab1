services:
  mongo:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    environment:
      #MONGO_INITDB_ROOT_USERNAME: mongo
      #MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: testbase
      MONGO_DB_ADMIN_USERNAME: mongo
      MONGO_DB_ADMIN_PASSWORD: mongo
    ports:
      - '27017:27017'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - mongo:/data/db
    networks:
      - backend
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - '8082:8081'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongo
      ME_CONFIG_MONGODB_URL: mongodb://mongo:mongo@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    tty: true
    stdin_open: true
    networks:
      - backend

  server:
    image: image-name
    extra_hosts:
      - "host.docker.internal:host-gateway"
    #build:
    #  context: .
    #  dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - backend
    #working_dir:
    #  /my-project
#    depends_on:
#      - mongo
    environment:
      DB_USERNAME: mongo
      DB_PASSWORD: mongo
      DB_URL: mongodb://mongo:27017/testbase?replicaSet=rs0

volumes:
  mongo:

networks:
  backend:
    driver: bridge
